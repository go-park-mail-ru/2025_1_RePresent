CREATE TABLE IF NOT EXISTS auth_user (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username TEXT NOT NULL UNIQUE,
    email TEXT NOT NULL UNIQUE CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
    password BYTEA NOT NULL,
    description TEXT,
    balance INT NOT NULL DEFAULT 0,
    created_at TIMESTAMP NOT NULL DEFAULT (now() AT TIME ZONE 'UTC'),
    updated_at TIMESTAMP NOT NULL DEFAULT (now() AT TIME ZONE 'UTC'),
    role SMALLINT NOT NULL -- role: 1=advertiser, 2=platform
);

CREATE INDEX IF NOT EXISTS idx_user_id ON auth_user(id);
CREATE INDEX IF NOT EXISTS idx_user_balance ON auth_user(balance);
CREATE UNIQUE INDEX IF NOT EXISTS auth_user_username_key ON auth_user (username);
CREATE UNIQUE INDEX IF NOT EXISTS auth_user_email_key ON auth_user (email);

CREATE TABLE IF NOT EXISTS banner (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    owner_id INT NOT NULL REFERENCES auth_user(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    balance DECIMAL(12,2) NOT NULL DEFAULT 0.00,
    content TEXT NOT NULL,
    link TEXT NOT NULL,
    max_price DECIMAL(12,2) NOT NULL DEFAULT 0.00,
    deleted BOOLEAN NOT NULL DEFAULT FALSE,
    status SMALLINT
);
CREATE INDEX IF NOT EXISTS idx_banner_owner_id ON banner(owner_id);
CREATE INDEX IF NOT EXISTS idx_banner_status ON banner(status);
CREATE INDEX IF NOT EXISTS idx_banner_deleted ON banner(deleted);
CREATE INDEX IF NOT EXISTS idx_banner_owner_id_status ON banner(owner_id) WHERE status = 1;


CREATE TABLE IF NOT EXISTS payment (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    owner_id INT NOT NULL REFERENCES auth_user(id) ON DELETE RESTRICT,
    amount DECIMAL(12,2) NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT (now() AT TIME ZONE 'UTC'),
    status SMALLINT NOT NULL,
    balance DECIMAL(12,2) NOT NULL
);
CREATE INDEX IF NOT EXISTS idx_payment_owner_id ON payment(owner_id);

CREATE TABLE IF NOT EXISTS transaction (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    transaction_id TEXT NOT NULL,
    user_id INT NOT NULL REFERENCES auth_user(id) ON DELETE RESTRICT,
    amount DECIMAL(12,2) NOT NULL,
    type TEXT NOT NULL,
    status TEXT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT (now() AT TIME ZONE 'UTC')
);
CREATE INDEX IF NOT EXISTS idx_transaction_user_id ON transaction(user_id);

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'update_updated_at') THEN
        CREATE OR REPLACE FUNCTION update_updated_at()
        RETURNS TRIGGER AS $function$
        BEGIN
            NEW.updated_at = (now() AT TIME ZONE 'UTC');
            RETURN NEW;
        END;
        $function$ LANGUAGE plpgsql;
    END IF;
END $$;

CREATE TRIGGER update_user_updated_at
BEFORE UPDATE ON auth_user
FOR EACH ROW
EXECUTE FUNCTION update_updated_at();

CREATE INDEX IF NOT EXISTS idx_banner_status ON banner(status);
CREATE INDEX IF NOT EXISTS idx_banner_owner_id ON banner(owner_id);
CREATE INDEX IF NOT EXISTS idx_banner_max_price ON banner(max_price);