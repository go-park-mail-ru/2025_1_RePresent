// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	slot "retarget/internal/adv-service/entity/slot"

	time "time"
)

// SlotRepositoryInterface is an autogenerated mock type for the SlotRepositoryInterface type
type SlotRepositoryInterface struct {
	mock.Mock
}

// CreateSlot provides a mock function with given fields: ctx, userID, s
func (_m *SlotRepositoryInterface) CreateSlot(ctx context.Context, userID int, s slot.Slot) (slot.Slot, error) {
	ret := _m.Called(ctx, userID, s)

	if len(ret) == 0 {
		panic("no return value specified for CreateSlot")
	}

	var r0 slot.Slot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, slot.Slot) (slot.Slot, error)); ok {
		return rf(ctx, userID, s)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, slot.Slot) slot.Slot); ok {
		r0 = rf(ctx, userID, s)
	} else {
		r0 = ret.Get(0).(slot.Slot)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, slot.Slot) error); ok {
		r1 = rf(ctx, userID, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSlot provides a mock function with given fields: ctx, userID, link, created_at
func (_m *SlotRepositoryInterface) DeleteSlot(ctx context.Context, userID int, link string, created_at time.Time) error {
	ret := _m.Called(ctx, userID, link, created_at)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSlot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, time.Time) error); ok {
		r0 = rf(ctx, userID, link, created_at)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCurrentFormats provides a mock function with given fields: ctx
func (_m *SlotRepositoryInterface) GetCurrentFormats(ctx context.Context) ([]slot.Format, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentFormats")
	}

	var r0 []slot.Format
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]slot.Format, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []slot.Format); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]slot.Format)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSlotInfoByLink provides a mock function with given fields: ctx, link
func (_m *SlotRepositoryInterface) GetSlotInfoByLink(ctx context.Context, link string) (slot.Slot, error) {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for GetSlotInfoByLink")
	}

	var r0 slot.Slot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (slot.Slot, error)); ok {
		return rf(ctx, link)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) slot.Slot); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Get(0).(slot.Slot)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSlotsByUser provides a mock function with given fields: ctx, userID
func (_m *SlotRepositoryInterface) GetSlotsByUser(ctx context.Context, userID int) ([]slot.Slot, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetSlotsByUser")
	}

	var r0 []slot.Slot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]slot.Slot, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []slot.Slot); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]slot.Slot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByLink provides a mock function with given fields: ctx, link
func (_m *SlotRepositoryInterface) GetUserByLink(ctx context.Context, link string) (int, time.Time, error) {
	ret := _m.Called(ctx, link)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByLink")
	}

	var r0 int
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, time.Time, error)); ok {
		return rf(ctx, link)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) time.Time); ok {
		r1 = rf(ctx, link)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, link)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// HealthCheck provides a mock function with given fields: ctx
func (_m *SlotRepositoryInterface) HealthCheck(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSlot provides a mock function with given fields: ctx, userID, s
func (_m *SlotRepositoryInterface) UpdateSlot(ctx context.Context, userID int, s slot.Slot) error {
	ret := _m.Called(ctx, userID, s)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSlot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, slot.Slot) error); ok {
		r0 = rf(ctx, userID, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSlotRepositoryInterface creates a new instance of SlotRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSlotRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *SlotRepositoryInterface {
	mock := &SlotRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
