// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	entity "retarget/internal/auth-service/entity/auth"

	mock "github.com/stretchr/testify/mock"
)

// SessionRepositoryInterface is an autogenerated mock type for the SessionRepositoryInterface type
type SessionRepositoryInterface struct {
	mock.Mock
}

// AddSession provides a mock function with given fields: userId, role
func (_m *SessionRepositoryInterface) AddSession(userId int, role int) (*entity.Session, error) {
	ret := _m.Called(userId, role)

	if len(ret) == 0 {
		panic("no return value specified for AddSession")
	}

	var r0 *entity.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*entity.Session, error)); ok {
		return rf(userId, role)
	}
	if rf, ok := ret.Get(0).(func(int, int) *entity.Session); ok {
		r0 = rf(userId, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userId, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloseConnection provides a mock function with no fields
func (_m *SessionRepositoryInterface) CloseConnection() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelSession provides a mock function with given fields: sessionId
func (_m *SessionRepositoryInterface) DelSession(sessionId string) error {
	ret := _m.Called(sessionId)

	if len(ret) == 0 {
		panic("no return value specified for DelSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(sessionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSession provides a mock function with given fields: sessionId
func (_m *SessionRepositoryInterface) GetSession(sessionId string) (*entity.Session, error) {
	ret := _m.Called(sessionId)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *entity.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Session, error)); ok {
		return rf(sessionId)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Session); ok {
		r0 = rf(sessionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sessionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// generateSessionID provides a mock function with no fields
func (_m *SessionRepositoryInterface) generateSessionID() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for generateSessionID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSessionRepositoryInterface creates a new instance of SessionRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionRepositoryInterface {
	mock := &SessionRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
