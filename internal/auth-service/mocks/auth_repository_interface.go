// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	entity "retarget/internal/auth-service/entity/auth"

	mock "github.com/stretchr/testify/mock"
)

// AuthRepositoryInterface is an autogenerated mock type for the AuthRepositoryInterface type
type AuthRepositoryInterface struct {
	mock.Mock
}

// CheckEmailOrUsernameExists provides a mock function with given fields: email, username, requestID
func (_m *AuthRepositoryInterface) CheckEmailOrUsernameExists(email string, username string, requestID string) (*entity.User, error) {
	ret := _m.Called(email, username, requestID)

	if len(ret) == 0 {
		panic("no return value specified for CheckEmailOrUsernameExists")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*entity.User, error)); ok {
		return rf(email, username, requestID)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *entity.User); ok {
		r0 = rf(email, username, requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(email, username, requestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloseConnection provides a mock function with no fields
func (_m *AuthRepositoryInterface) CloseConnection() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNewUser provides a mock function with given fields: user, requestID
func (_m *AuthRepositoryInterface) CreateNewUser(user *entity.User, requestID string) error {
	ret := _m.Called(user, requestID)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.User, string) error); ok {
		r0 = rf(user, requestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByEmail provides a mock function with given fields: email, requestID
func (_m *AuthRepositoryInterface) GetUserByEmail(email string, requestID string) (*entity.User, error) {
	ret := _m.Called(email, requestID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*entity.User, error)); ok {
		return rf(email, requestID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *entity.User); ok {
		r0 = rf(email, requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, requestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: id, requestID
func (_m *AuthRepositoryInterface) GetUserByID(id int, requestID string) (*entity.User, error) {
	ret := _m.Called(id, requestID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (*entity.User, error)); ok {
		return rf(id, requestID)
	}
	if rf, ok := ret.Get(0).(func(int, string) *entity.User); ok {
		r0 = rf(id, requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(id, requestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: username, requestID
func (_m *AuthRepositoryInterface) GetUserByUsername(username string, requestID string) (*entity.User, error) {
	ret := _m.Called(username, requestID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*entity.User, error)); ok {
		return rf(username, requestID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *entity.User); ok {
		r0 = rf(username, requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, requestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthRepositoryInterface creates a new instance of AuthRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepositoryInterface {
	mock := &AuthRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
