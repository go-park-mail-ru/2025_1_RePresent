// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "retarget/internal/auth-service/entity/auth"

	mock "github.com/stretchr/testify/mock"
)

// AuthUsecaseInterface is an autogenerated mock type for the AuthUsecaseInterface type
type AuthUsecaseInterface struct {
	mock.Mock
}

// AddSession provides a mock function with given fields: userID, role
func (_m *AuthUsecaseInterface) AddSession(userID int, role int) (*entity.Session, error) {
	ret := _m.Called(userID, role)

	if len(ret) == 0 {
		panic("no return value specified for AddSession")
	}

	var r0 *entity.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*entity.Session, error)); ok {
		return rf(userID, role)
	}
	if rf, ok := ret.Get(0).(func(int, int) *entity.Session); ok {
		r0 = rf(userID, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckCode provides a mock function with given fields: code, userId
func (_m *AuthUsecaseInterface) CheckCode(code int, userId int) error {
	ret := _m.Called(code, userId)

	if len(ret) == 0 {
		panic("no return value specified for CheckCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(code, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCode provides a mock function with given fields: userId
func (_m *AuthUsecaseInterface) CreateCode(userId int) (int, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for CreateCode")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, userID, requestID
func (_m *AuthUsecaseInterface) GetUser(ctx context.Context, userID int, requestID string) (*entity.User, error) {
	ret := _m.Called(ctx, userID, requestID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (*entity.User, error)); ok {
		return rf(ctx, userID, requestID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) *entity.User); ok {
		r0 = rf(ctx, userID, requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, userID, requestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, email, password, role, requestID
func (_m *AuthUsecaseInterface) Login(ctx context.Context, email string, password string, role int, requestID string) (*entity.User, error) {
	ret := _m.Called(ctx, email, password, role, requestID)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, string) (*entity.User, error)); ok {
		return rf(ctx, email, password, role, requestID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, string) *entity.User); ok {
		r0 = rf(ctx, email, password, role, requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, string) error); ok {
		r1 = rf(ctx, email, password, role, requestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: sessionId
func (_m *AuthUsecaseInterface) Logout(sessionId string) error {
	ret := _m.Called(sessionId)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(sessionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: ctx, username, email, password, role, requestID
func (_m *AuthUsecaseInterface) Register(ctx context.Context, username string, email string, password string, role int, requestID string) (*entity.User, error) {
	ret := _m.Called(ctx, username, email, password, role, requestID)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, string) (*entity.User, error)); ok {
		return rf(ctx, username, email, password, role, requestID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, string) *entity.User); ok {
		r0 = rf(ctx, username, email, password, role, requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int, string) error); ok {
		r1 = rf(ctx, username, email, password, role, requestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthUsecaseInterface creates a new instance of AuthUsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUsecaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUsecaseInterface {
	mock := &AuthUsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
