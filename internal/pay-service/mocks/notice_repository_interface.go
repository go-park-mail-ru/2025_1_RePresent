//go:build !exclude_tests

// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// NoticeRepositoryInterface is an autogenerated mock type for the NoticeRepositoryInterface type
type NoticeRepositoryInterface struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *NoticeRepositoryInterface) Close() {
	_m.Called()
}

// SendLowBalanceNotification provides a mock function with given fields: userID, message
func (_m *NoticeRepositoryInterface) SendLowBalanceNotification(userID int, message string) error {
	ret := _m.Called(userID, message)

	if len(ret) == 0 {
		panic("no return value specified for SendLowBalanceNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(userID, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendTopUpBalanceEvent provides a mock function with given fields: userID, message
func (_m *NoticeRepositoryInterface) SendTopUpBalanceEvent(userID int, message string) error {
	ret := _m.Called(userID, message)

	if len(ret) == 0 {
		panic("no return value specified for SendTopUpBalanceEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(userID, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNoticeRepositoryInterface creates a new instance of NoticeRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNoticeRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *NoticeRepositoryInterface {
	mock := &NoticeRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
