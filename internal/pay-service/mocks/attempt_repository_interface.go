//go:build !exclude_tests

// Code generated by mockery v2.53.4. DO NOT EDIT
// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// AttemptRepositoryInterface is an autogenerated mock type for the AttemptRepositoryInterface type
type AttemptRepositoryInterface struct {
	mock.Mock
}

// CloseConnection provides a mock function with no fields
func (_m *AttemptRepositoryInterface) CloseConnection() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecrementAttemptsByUserID provides a mock function with given fields: userID
func (_m *AttemptRepositoryInterface) DecrementAttemptsByUserID(userID int) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DecrementAttemptsByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAttemptsByUserID provides a mock function with given fields: user_id
func (_m *AttemptRepositoryInterface) GetAttemptsByUserID(user_id int) (int, error) {
	ret := _m.Called(user_id)

	if len(ret) == 0 {
		panic("no return value specified for GetAttemptsByUserID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int, error)); ok {
		return rf(user_id)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(user_id)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementAttemptsByUserID provides a mock function with given fields: user_id
func (_m *AttemptRepositoryInterface) IncrementAttemptsByUserID(user_id int) error {
	ret := _m.Called(user_id)

	if len(ret) == 0 {
		panic("no return value specified for IncrementAttemptsByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(user_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetAttemptsByUserID provides a mock function with given fields: user_id
func (_m *AttemptRepositoryInterface) ResetAttemptsByUserID(user_id int) error {
	ret := _m.Called(user_id)

	if len(ret) == 0 {
		panic("no return value specified for ResetAttemptsByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(user_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAttemptRepositoryInterface creates a new instance of AttemptRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAttemptRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AttemptRepositoryInterface {
	mock := &AttemptRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
