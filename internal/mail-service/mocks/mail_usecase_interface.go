// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MailUsecaseInterface is an autogenerated mock type for the MailUsecaseInterface type
type MailUsecaseInterface struct {
	mock.Mock
}

// GetUserByID provides a mock function with given fields: user_id
func (_m *MailUsecaseInterface) GetUserByID(user_id int) (string, string, string, error) {
	ret := _m.Called(user_id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 string
	var r1 string
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(int) (string, string, string, error)); ok {
		return rf(user_id)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(user_id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) string); ok {
		r1 = rf(user_id)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(int) string); ok {
		r2 = rf(user_id)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(int) error); ok {
		r3 = rf(user_id)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// SendCodeMail provides a mock function with given fields: operation, to, code
func (_m *MailUsecaseInterface) SendCodeMail(operation int, to string, code string) error {
	ret := _m.Called(operation, to, code)

	if len(ret) == 0 {
		panic("no return value specified for SendCodeMail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, string) error); ok {
		r0 = rf(operation, to, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMailUsecaseInterface creates a new instance of MailUsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMailUsecaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MailUsecaseInterface {
	mock := &MailUsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
