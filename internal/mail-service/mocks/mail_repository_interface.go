// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	smtp "net/smtp"

	mock "github.com/stretchr/testify/mock"
)

// MailRepositoryInterface is an autogenerated mock type for the MailRepositoryInterface type
type MailRepositoryInterface struct {
	mock.Mock
}

// CloseConnection provides a mock function with no fields
func (_m *MailRepositoryInterface) CloseConnection() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenConnection provides a mock function with no fields
func (_m *MailRepositoryInterface) OpenConnection() (*smtp.Client, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OpenConnection")
	}

	var r0 *smtp.Client
	var r1 error
	if rf, ok := ret.Get(0).(func() (*smtp.Client, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *smtp.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*smtp.Client)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: to, msg
func (_m *MailRepositoryInterface) Send(to string, msg string) error {
	ret := _m.Called(to, msg)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(to, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyEmail provides a mock function with given fields: email
func (_m *MailRepositoryInterface) VerifyEmail(email string) (bool, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for VerifyEmail")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMailRepositoryInterface creates a new instance of MailRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMailRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MailRepositoryInterface {
	mock := &MailRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
