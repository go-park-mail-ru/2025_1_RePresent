// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: pkg/proto/banner/banner.proto

package bannerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BannerService_GetRandomBanner_FullMethodName    = "/bannerpb.BannerService/GetRandomBanner"
	BannerService_GetSuitableBanners_FullMethodName = "/bannerpb.BannerService/GetSuitableBanners"
	BannerService_GetBannerByID_FullMethodName      = "/bannerpb.BannerService/GetBannerByID"
)

// BannerServiceClient is the client API for BannerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannerServiceClient interface {
	GetRandomBanner(ctx context.Context, in *BannerWithMinPrice, opts ...grpc.CallOption) (*Banner, error)
	GetSuitableBanners(ctx context.Context, in *BannerWithMinPrice, opts ...grpc.CallOption) (*ActiveBanners, error)
	GetBannerByID(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*Banner, error)
}

type bannerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBannerServiceClient(cc grpc.ClientConnInterface) BannerServiceClient {
	return &bannerServiceClient{cc}
}

func (c *bannerServiceClient) GetRandomBanner(ctx context.Context, in *BannerWithMinPrice, opts ...grpc.CallOption) (*Banner, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Banner)
	err := c.cc.Invoke(ctx, BannerService_GetRandomBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) GetSuitableBanners(ctx context.Context, in *BannerWithMinPrice, opts ...grpc.CallOption) (*ActiveBanners, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActiveBanners)
	err := c.cc.Invoke(ctx, BannerService_GetSuitableBanners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) GetBannerByID(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*Banner, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Banner)
	err := c.cc.Invoke(ctx, BannerService_GetBannerByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannerServiceServer is the server API for BannerService service.
// All implementations must embed UnimplementedBannerServiceServer
// for forward compatibility.
type BannerServiceServer interface {
	GetRandomBanner(context.Context, *BannerWithMinPrice) (*Banner, error)
	GetSuitableBanners(context.Context, *BannerWithMinPrice) (*ActiveBanners, error)
	GetBannerByID(context.Context, *BannerRequest) (*Banner, error)
	mustEmbedUnimplementedBannerServiceServer()
}

// UnimplementedBannerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBannerServiceServer struct{}

func (UnimplementedBannerServiceServer) GetRandomBanner(context.Context, *BannerWithMinPrice) (*Banner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomBanner not implemented")
}
func (UnimplementedBannerServiceServer) GetSuitableBanners(context.Context, *BannerWithMinPrice) (*ActiveBanners, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuitableBanners not implemented")
}
func (UnimplementedBannerServiceServer) GetBannerByID(context.Context, *BannerRequest) (*Banner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBannerByID not implemented")
}
func (UnimplementedBannerServiceServer) mustEmbedUnimplementedBannerServiceServer() {}
func (UnimplementedBannerServiceServer) testEmbeddedByValue()                       {}

// UnsafeBannerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannerServiceServer will
// result in compilation errors.
type UnsafeBannerServiceServer interface {
	mustEmbedUnimplementedBannerServiceServer()
}

func RegisterBannerServiceServer(s grpc.ServiceRegistrar, srv BannerServiceServer) {
	// If the following call pancis, it indicates UnimplementedBannerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BannerService_ServiceDesc, srv)
}

func _BannerService_GetRandomBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerWithMinPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).GetRandomBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_GetRandomBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).GetRandomBanner(ctx, req.(*BannerWithMinPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_GetSuitableBanners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerWithMinPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).GetSuitableBanners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_GetSuitableBanners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).GetSuitableBanners(ctx, req.(*BannerWithMinPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_GetBannerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).GetBannerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_GetBannerByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).GetBannerByID(ctx, req.(*BannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BannerService_ServiceDesc is the grpc.ServiceDesc for BannerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BannerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bannerpb.BannerService",
	HandlerType: (*BannerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRandomBanner",
			Handler:    _BannerService_GetRandomBanner_Handler,
		},
		{
			MethodName: "GetSuitableBanners",
			Handler:    _BannerService_GetSuitableBanners_Handler,
		},
		{
			MethodName: "GetBannerByID",
			Handler:    _BannerService_GetBannerByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/banner/banner.proto",
}
